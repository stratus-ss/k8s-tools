[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "openshift-control-plane-replacement"
version = "1.0.0"
authors = [
    {name = "stratus", email = "stratus@example.com"},
]
description = "OpenShift Control Plane Replacement and Expansion Tool"
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.8"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Console",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: GPL",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: System :: Systems Administration",
    "Topic :: System :: Clustering",
]
keywords = [
    "openshift",
    "kubernetes", 
    "control-plane",
    "bare-metal",
    "cluster-management",
    "etcd",
    "infrastructure",
]
dependencies = [
    "PyYAML>=6.0",
]

[project.optional-dependencies]
dev = [
    "black>=22.0.0",
    "flake8>=4.0.0",
    "pytest>=7.0.0",
    "pytest-mock>=3.10.0",
    "pytest-cov>=4.0.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-mock>=3.10.0",
    "pytest-cov>=4.0.0",
    "PyYAML>=6.0",
]

[project.scripts]
replace-control-plane = "replace_control_plane:main"
replace-control-plane-modular = "replace_control_plane_modular:main"

[project.urls]
Homepage = "https://github.com/stratus-ss/k8s-tools"
Repository = "https://github.com/stratus-ss/k8s-tools.git"
"Bug Tracker" = "https://github.com/stratus-ss/k8s-tools/issues"
Documentation = "https://github.com/stratus-ss/k8s-tools/tree/main/openshift-related/replace_control_plane"

[tool.setuptools]
packages = ["modules"]
include-package-data = true

[tool.setuptools.package-data]
modules = ["*.yaml", "*.yml", "*.json"]

[tool.black]
line-length = 120
target-version = ['py38', 'py39', 'py310', 'py311', 'py312', 'py313']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | venv
  | \.pytest_cache
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.flake8]
max-line-length = 120
extend-ignore = ["E203", "W503", "E501"]
exclude = [
    ".git",
    "__pycache__",
    ".pytest_cache",
    "build",
    "dist",
    "*.egg-info",
    "venv",
    ".venv"
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--tb=short",
    "--strict-markers",
    "--cov=modules",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-fail-under=15"
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests requiring cluster access",
    "unit: marks tests as unit tests (default)",
]

[tool.coverage.run]
source = ["modules"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.isort]
profile = "black"
line_length = 120
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true